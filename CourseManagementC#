Creating a Course Management System in ASP.NET involves several steps. Below, I'll guide you through setting up the project, creating the database, and developing the application step by step.

### Step 1: Setting Up the MySQL Database

First, set up your MySQL database. Open your MySQL terminal or MySQL Workbench and execute the following SQL commands to create the database and necessary tables.

```sql
CREATE DATABASE course_management;

USE course_management;

CREATE TABLE courses (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    description TEXT,
    instructor VARCHAR(100)
);

CREATE TABLE students (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL
);

CREATE TABLE enrollments (
    id INT AUTO_INCREMENT PRIMARY KEY,
    student_id INT,
    course_id INT,
    FOREIGN KEY (student_id) REFERENCES students(id),
    FOREIGN KEY (course_id) REFERENCES courses(id)
);
```

### Step 2: Setting Up the ASP.NET Project

1. **Create a New Project:**
   - Open Visual Studio.
   - Create a new project.
   - Select "ASP.NET Core Web Application" and click "Next."
   - Name your project (e.g., `CourseManagementSystem`) and click "Create."
   - Select "Web Application (Model-View-Controller)" and click "Create."

2. **Add MySQL NuGet Packages:**
   - Right-click on the project in the Solution Explorer and select "Manage NuGet Packages."
   - Search for `MySql.Data.EntityFrameworkCore` and install it.

### Step 3: Configuring the Database Context

1. **Add Connection String:**
   - Open `appsettings.json` and add your MySQL connection string.

```json
{
  "ConnectionStrings": {
    "DefaultConnection": "server=localhost;database=course_management;user=root;password=yourpassword;"
  },
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft": "Warning",
      "Microsoft.Hosting.Lifetime": "Information"
    }
  },
  "AllowedHosts": "*"
}
```

2. **Create the Data Context:**
   - Create a new folder named `Data` in your project.
   - Add a class named `ApplicationDbContext.cs` in the `Data` folder.

```csharp
using Microsoft.EntityFrameworkCore;
using CourseManagementSystem.Models;

namespace CourseManagementSystem.Data
{
    public class ApplicationDbContext : DbContext
    {
        public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options)
            : base(options)
        {
        }

        public DbSet<Course> Courses { get; set; }
        public DbSet<Student> Students { get; set; }
        public DbSet<Enrollment> Enrollments { get; set; }
    }
}
```

3. **Register the DbContext:**
   - Open `Startup.cs` and add the following lines in the `ConfigureServices` method.

```csharp
public void ConfigureServices(IServiceCollection services)
{
    services.AddDbContext<ApplicationDbContext>(options =>
        options.UseMySQL(Configuration.GetConnectionString("DefaultConnection")));
    services.AddControllersWithViews();
}
```

### Step 4: Creating the Models

1. **Create the Models:**
   - Create a new folder named `Models` in your project.
   - Add the following classes in the `Models` folder.

**Course.cs**
```csharp
using System.ComponentModel.DataAnnotations;

namespace CourseManagementSystem.Models
{
    public class Course
    {
        public int Id { get; set; }

        [Required]
        public string Name { get; set; }

        public string Description { get; set; }

        public string Instructor { get; set; }
    }
}
```

**Student.cs**
```csharp
using System.ComponentModel.DataAnnotations;

namespace CourseManagementSystem.Models
{
    public class Student
    {
        public int Id { get; set; }

        [Required]
        public string Name { get; set; }

        [Required]
        [EmailAddress]
        public string Email { get; set; }
    }
}
```

**Enrollment.cs**
```csharp
namespace CourseManagementSystem.Models
{
    public class Enrollment
    {
        public int Id { get; set; }
        public int StudentId { get; set; }
        public int CourseId { get; set; }

        public Student Student { get; set; }
        public Course Course { get; set; }
    }
}
```

### Step 5: Creating the Controllers

1. **Create the Controllers:**
   - Create a new folder named `Controllers` in your project.
   - Add the following controllers in the `Controllers` folder.

**CoursesController.cs**
```csharp
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using CourseManagementSystem.Data;
using CourseManagementSystem.Models;
using System.Threading.Tasks;

namespace CourseManagementSystem.Controllers
{
    public class CoursesController : Controller
    {
        private readonly ApplicationDbContext _context;

        public CoursesController(ApplicationDbContext context)
        {
            _context = context;
        }

        public async Task<IActionResult> Index()
        {
            return View(await _context.Courses.ToListAsync());
        }

        public IActionResult Create()
        {
            return View();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create([Bind("Id,Name,Description,Instructor")] Course course)
        {
            if (ModelState.IsValid)
            {
                _context.Add(course);
                await _context.SaveChangesAsync();
                return RedirectToAction(nameof(Index));
            }
            return View(course);
        }
    }
}
```

**StudentsController.cs**
```csharp
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using CourseManagementSystem.Data;
using CourseManagementSystem.Models;
using System.Threading.Tasks;

namespace CourseManagementSystem.Controllers
{
    public class StudentsController : Controller
    {
        private readonly ApplicationDbContext _context;

        public StudentsController(ApplicationDbContext context)
        {
            _context = context;
        }

        public async Task<IActionResult> Index()
        {
            return View(await _context.Students.ToListAsync());
        }

        public IActionResult Create()
        {
            return View();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create([Bind("Id,Name,Email")] Student student)
        {
            if (ModelState.IsValid)
            {
                _context.Add(student);
                await _context.SaveChangesAsync();
                return RedirectToAction(nameof(Index));
            }
            return View(student);
        }
    }
}
```

**EnrollmentsController.cs**
```csharp
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using CourseManagementSystem.Data;
using CourseManagementSystem.Models;
using System.Linq;
using System.Threading.Tasks;

namespace CourseManagementSystem.Controllers
{
    public class EnrollmentsController : Controller
    {
        private readonly ApplicationDbContext _context;

        public EnrollmentsController(ApplicationDbContext context)
        {
            _context = context;
        }

        public async Task<IActionResult> Index()
        {
            var enrollments = _context.Enrollments.Include(e => e.Student).Include(e => e.Course);
            return View(await enrollments.ToListAsync());
        }

        public IActionResult Create()
        {
            ViewData["Students"] = _context.Students.ToList();
            ViewData["Courses"] = _context.Courses.ToList();
            return View();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create([Bind("Id,StudentId,CourseId")] Enrollment enrollment)
        {
            if (ModelState.IsValid)
            {
                _context.Add(enrollment);
                await _context.SaveChangesAsync();
                return RedirectToAction(nameof(Index));
            }
            ViewData["Students"] = _context.Students.ToList();
            ViewData["Courses"] = _context.Courses.ToList();
            return View(enrollment);
        }
    }
}
```

### Step 6: Creating the Views

1. **Create the Views:**
   - Create a new folder named `Views` in your project.
   - Inside the `Views` folder, create folders for `Courses`, `Students`, and `Enrollments`.
   - Add the following views for each controller.

**Courses/Index.cshtml**
```html
@model IEnumerable<CourseManagementSystem.Models.Course>

@{
    ViewData["Title"] = "Courses";
}

<h1>Courses</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>

<table class="table">
    <thead>
        <tr>
            <th>Name</th>
            <th>Description</th>
            <th>Instructor</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>@item.Name</td>
                <td>@item.Description</td>
                <td>@item.Instructor</td>
            </tr>
        }
    </tbody>
</table>
```

**Courses/Create.cshtml**
```html
@model CourseManagementSystem.Models.Course

@{
    ViewData["Title"] = "Create Course";
}

<h1>Create Course</h1>

<h4>Course</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create">
            <div class="form-group">
                <label asp-for="Name" class="control-label"></label>
                <input asp-for="Name" class="form-control" />
                <span asp-validation-for="Name" class="

text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Description" class="control-label"></label>
                <input asp-for="Description" class="form-control" />
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Instructor" class="control-label"></label>
                <input asp-for="Instructor" class="form-control" />
                <span asp-validation-for="Instructor" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>
<div>
    <a asp-action="Index">Back to List</a>
</div>
```

**Students/Index.cshtml**
```html
@model IEnumerable<CourseManagementSystem.Models.Student>

@{
    ViewData["Title"] = "Students";
}

<h1>Students</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>

<table class="table">
    <thead>
        <tr>
            <th>Name</th>
            <th>Email</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>@item.Name</td>
                <td>@item.Email</td>
            </tr>
        }
    </tbody>
</table>
```

**Students/Create.cshtml**
```html
@model CourseManagementSystem.Models.Student

@{
    ViewData["Title"] = "Create Student";
}

<h1>Create Student</h1>

<h4>Student</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create">
            <div class="form-group">
                <label asp-for="Name" class="control-label"></label>
                <input asp-for="Name" class="form-control" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Email" class="control-label"></label>
                <input asp-for="Email" class="form-control" />
                <span asp-validation-for="Email" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>
<div>
    <a asp-action="Index">Back to List</a>
</div>
```

**Enrollments/Index.cshtml**
```html
@model IEnumerable<CourseManagementSystem.Models.Enrollment>

@{
    ViewData["Title"] = "Enrollments";
}

<h1>Enrollments</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>

<table class="table">
    <thead>
        <tr>
            <th>Student</th>
            <th>Course</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>@item.Student.Name</td>
                <td>@item.Course.Name</td>
            </tr>
        }
    </tbody>
</table>
```

**Enrollments/Create.cshtml**
```html
@model CourseManagementSystem.Models.Enrollment

@{
    ViewData["Title"] = "Create Enrollment";
}

<h1>Create Enrollment</h1>

<h4>Enrollment</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create">
            <div class="form-group">
                <label asp-for="StudentId" class="control-label">Student</label>
                <select asp-for="StudentId" class="form-control" asp-items="@(new SelectList(ViewData["Students"] as List<CourseManagementSystem.Models.Student>, "Id", "Name"))"></select>
                <span asp-validation-for="StudentId" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="CourseId" class="control-label">Course</label>
                <select asp-for="CourseId" class="form-control" asp-items="@(new SelectList(ViewData["Courses"] as List<CourseManagementSystem.Models.Course>, "Id", "Name"))"></select>
                <span asp-validation-for="CourseId" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>
<div>
    <a asp-action="Index">Back to List</a>
</div>
```

### Step 7: Running the Application

1. **Apply Migrations:**
   - Open the Package Manager Console in Visual Studio.
   - Run the following commands to create and apply migrations:

```powershell
Add-Migration InitialCreate
Update-Database
```

2. **Run the Application:**
   - Press `F5` or click the `Run` button in Visual Studio to start the application.
   - The application should open in your default browser, and you should be able to navigate to the different sections (Courses, Students, Enrollments) and perform CRUD operations.

### Conclusion

This guide provides a basic implementation of a Course Management System using ASP.NET Core MVC and MySQL. You can extend this by adding more features, improving the UI, and handling exceptions and validations more robustly. This should give you a solid foundation to build and expand your application.
